"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
"""
import logging
import asyncio
import json
import traceback
from typing import Dict, Callable, Optional, List
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
import traceback
import os
from dotenv import load_dotenv
from datetime import timedelta
from aiohttp import ClientTimeout

logger = logging.getLogger(__name__)

class TelegramNotifier:
    def __init__(self, config: dict):
        self.token = config.get('telegram_token')
        self.chat_id = config.get('telegram_chat_id')
        self.bot: Optional[Bot] = None
        self.max_retries = 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        self.retry_delay = 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        self.message_delay = 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        self.timeout = ClientTimeout(total=30)  # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self.dp = Dispatcher()
        self.message_queue = asyncio.Queue()
        self.is_running = False
        self.trades_history: List[Dict] = []
        self.last_report_time = None
        self.report_interval = timedelta(hours=4)
        self.last_message_time = 0  # –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self._init_bot()
        
        logger.info("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
    def _init_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            if not self.token or not self.chat_id:
                logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram")
                return
            self.bot = Bot(token=self.token, timeout=self.timeout)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {str(e)}")

    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            self.is_running = True
            asyncio.create_task(self._process_message_queue())
            await self.notify_start()
            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Telegram: {e}")
            logger.error(traceback.format_exc())
            raise
            
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            self.is_running = False
            await self.notify_stop()
            
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
            while not self.message_queue.empty():
                try:
                    self.message_queue.get_nowait()
                except asyncio.QueueEmpty:
                    break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π
            if not self.message_queue.empty():
                logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
                await asyncio.sleep(5)
                
            await self.bot.session.close()
            logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Telegram: {e}")
            logger.error(traceback.format_exc())
            
    async def _process_message_queue(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while self.is_running:
            try:
                if not self.message_queue.empty():
                    try:
                        message = await self.message_queue.get()
                        await self._send_message_with_retry(message)
                    except asyncio.CancelledError:
                        raise
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
                        logger.error(traceback.format_exc())
                await asyncio.sleep(0.1)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                logger.error(traceback.format_exc())
                await asyncio.sleep(self.retry_delay)
                
    async def _send_message_with_retry(self, message: str, retries: int = 0) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            retries: –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            current_time = asyncio.get_event_loop().time()
            if current_time - self.last_message_time < self.message_delay:
                await asyncio.sleep(self.message_delay)
            
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
            self.last_message_time = asyncio.get_event_loop().time()
            
        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram")
            if retries < self.max_retries:
                await asyncio.sleep(self.retry_delay * (retries + 1))
                await self._send_message_with_retry(message, retries + 1)
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            if retries < self.max_retries:
                await asyncio.sleep(self.retry_delay * (retries + 1))
                await self._send_message_with_retry(message, retries + 1)
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                logger.error(traceback.format_exc())
                
    async def notify(self, message: str, max_retries: Optional[int] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é self.max_retries)
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        if not self.bot or not self.chat_id:
            logger.error("Telegram –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        try:
            await self.message_queue.put(message)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return False
        
    async def notify_start(self) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        await self.notify("üü¢ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
    async def notify_stop(self) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        await self.notify("üî¥ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    async def notify_error(self, error: str) -> None:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            error: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        """
        message = f"‚ùå –û—à–∏–±–∫–∞: {error}"
        await self.notify(message)
        
    async def notify_trade(self, symbol: str, side: str, quantity: float, price: float) -> None:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            side: –°—Ç–æ—Ä–æ–Ω–∞ —Å–¥–µ–ª–∫–∏ (buy/sell)
            quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            price: –¶–µ–Ω–∞
        """
        emoji = "üü¢" if side.lower() == "buy" else "üî¥"
        message = f"{emoji} {symbol}: {side.upper()} {quantity:.8f} @ {price:.8f}"
        await self.notify(message)
        
    def _format_volume(self, volume: float) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (–ö, –ú)
        
        Args:
            volume: –û–±—ä–µ–º –≤ USDT
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–º
        """
        if volume >= 1_000_000:
            return f"{volume/1_000_000:.2f}M"
        elif volume >= 1_000:
            return f"{volume/1_000:.2f}K"
        return f"{volume:.2f}"
        
    async def notify_liquidity_cluster(self, symbol: str, price: float, volume: float) -> None:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–ª–∞—Å—Ç–µ—Ä–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            price: –¶–µ–Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞
            volume: –û–±—ä–µ–º –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ
        """
        formatted_volume = self._format_volume(volume)
        message = f"üíß {symbol}: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–ª–∞—Å—Ç–µ—Ä –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏\n–¶–µ–Ω–∞: {price:.8f}\n–û–±—ä–µ–º: {formatted_volume} USDT"
        await self.notify(message)
        
    async def notify_position_update(self, symbol: str, position_size: float, pnl: float) -> None:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            position_size: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            pnl: –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
        """
        emoji = "üìà" if pnl >= 0 else "üìâ"
        formatted_pnl = self._format_volume(pnl)
        message = f"{emoji} {symbol}: –ü–æ–∑–∏—Ü–∏—è {position_size:.8f}\nP&L: {formatted_pnl} USDT"
        await self.notify(message) 