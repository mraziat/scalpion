from orderbook_processor import OrderBookProcessor
import pandas as pd

# Создаем тестовые данные стакана с более сложным распределением
test_data = {
    'bids': [
        # Большой кластер с высоким объемом (45000.00 - 45000.50)
        [45000.50, 3.0],
        [45000.45, 2.5],
        [45000.40, 2.8],
        [45000.35, 2.2],
        [45000.30, 2.7],
        [45000.25, 2.1],
        [45000.20, 2.4],
        [45000.15, 2.6],
        [45000.10, 2.3],
        [45000.05, 2.9],
        [45000.00, 2.5],
        
        # Средний кластер (44999.50 - 44999.80)
        [44999.80, 1.5],
        [44999.70, 1.2],
        [44999.60, 1.8],
        [44999.50, 1.3],
        
        # Маленький кластер с высоким объемом (44999.00 - 44999.10)
        [44999.10, 4.0],
        [44999.05, 3.5],
        [44999.00, 3.8],
        
        # Разрозненные ордера
        [44998.80, 0.5],
        [44998.60, 0.3],
        [44998.40, 0.4],
        [44998.20, 0.6],
        [44998.00, 0.2]
    ],
    'asks': [
        # Большой кластер (45001.00 - 45001.50)
        [45001.00, 2.8],
        [45001.10, 2.5],
        [45001.20, 2.9],
        [45001.30, 2.4],
        [45001.40, 2.6],
        [45001.50, 2.3],
        
        # Два близких кластера
        [45002.00, 1.5],
        [45002.05, 1.8],
        [45002.10, 1.2],
        [45002.20, 1.6],
        [45002.25, 1.4],
        [45002.30, 1.7],
        
        # Кластер с очень большим объемом
        [45003.00, 5.0],
        [45003.10, 4.5],
        [45003.20, 4.8],
        
        # Разрозненные ордера
        [45004.00, 0.8],
        [45004.50, 0.6],
        [45005.00, 0.4],
        [45005.50, 0.3],
        [45006.00, 0.5]
    ]
}

# Создаем DataFrame из тестовых данных
bids_df = pd.DataFrame(test_data['bids'], columns=['price', 'quantity'])
bids_df['side'] = 'bid'
asks_df = pd.DataFrame(test_data['asks'], columns=['price', 'quantity'])
asks_df['side'] = 'ask'
orderbook_data = pd.concat([bids_df, asks_df], ignore_index=True)

# Создаем процессор
processor = OrderBookProcessor()

# Обрабатываем данные
processor.process_depth_update('BTCUSDT', orderbook_data)

# Получаем результаты
clusters = processor.get_liquidity_clusters('BTCUSDT')
print('\nСформированные кластеры:')
for cluster in clusters:
    print(f'\nКластер:')
    print(f'Сторона: {cluster["side"]}')
    print(f'Цена: {cluster["price"]:.2f}')
    print(f'Объем: {cluster["quantity"]:.2f}')
    print(f'Количество ордеров: {cluster["orders"]}')
    print(f'Диапазон цен: [{cluster["price_range"][0]:.2f}, {cluster["price_range"][1]:.2f}]')
    print(f'Отношение объема: {cluster["volume_ratio"]:.2f}')
    print(f'Стандартное отклонение цен: {cluster["price_std"]:.6f}') 